
// Code generated by @open-rpc/client-generator DO NOT EDIT.
import { RequestManager, WebSocketTransport, HTTPTransport, Client, JSONRPCError } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenrpcDocument as OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator, MethodNotFoundError } from "@open-rpc/schema-utils-js";

export type DeviceID = string;
export type SensorType = string;
export type StringDoaGddGA = string;
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfDeviceIDSensorTypeStringDoaGddGAStringDoaGddGAStringDoaGddGA = DeviceID | SensorType | StringDoaGddGA;
export type StartScan = () => Promise<StringDoaGddGA>;
export type StopScan = () => Promise<StringDoaGddGA>;
export type GetSensorData = (deviceID: DeviceID, sensorType: SensorType) => Promise<StringDoaGddGA>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https";
    host: string;
    port: number;
    path?: string;
  }
}

export class Openrpcthingy52 {
  public rpc: Client;
  public static openrpcDocument: OpenRPC = {"openrpc":"1.2.4","info":{"title":"openrpcthingy52","version":"1.0.0","description":"openRPC middleware for devices that interface with nordic thingy52 running espurino firmware","termsOfService":"https://github.com/bakon11/openrpcthingy52/","contact":{"name":"bakon","email":"bakon@bakon.dev","url":"https://bakon.dev"},"license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"}},"servers":[{"name":"Device which will be interfacing with yout Espruino powered thingy52","url":"http://localhost:3000"}],"methods":[{"name":"startScan","description":"Scans for BLE devices","params":[],"result":{"name":"scanDevicesResult","description":"Returns all BLE devices in vicinity","schema":{"type":"string"}}},{"name":"stopScan","description":"Stops scaning for BLE devices","params":[],"result":{"name":"stopScanResult","description":"Returns status fo stop scan command","schema":{"type":"string"}}},{"name":"getSensorData","description":"Gets recorded sensor data","params":[{"name":"deviceID","description":"Device id to query","required":true,"schema":{"title":"deviceID","type":"string"}},{"name":"sensorType","description":"sensor data to fetch","required":true,"schema":{"title":"sensorType","type":"string"}}],"result":{"name":"getPressureResult","description":"Returns pressure and temp readings from board","schema":{"type":"string"}}}],"components":{"contentDescriptors":{"deviceID":{"name":"deviceID","description":"Device id to query","required":true,"schema":{"title":"deviceID","type":"string"}},"sensorType":{"name":"sensorType","description":"sensor data to fetch","required":true,"schema":{"title":"sensorType","type":"string"}},"deviceData":{"name":"deviceData","description":"device data to be recorded","required":true,"schema":{"title":"deviceData","type":"string"}}}}} ;
  public transport: HTTPTransport | WebSocketTransport;
  private validator: MethodCallValidator;
  private timeout: number | undefined;

  constructor(options: Options) {

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port} = options.transport;
    let path = options.transport.path || "";
    if(path && path[0] !== "/") {
        path = "/" + path;
    }
    switch (type) {
      case 'http':
      case 'https':
        this.transport = new HTTPTransport(type + "://" + host + ":" + port + path)
        break;
      case 'websocket':
        this.transport = new WebSocketTransport("ws://" + host + ":" + port + path)
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([this.transport]));
    this.validator = new MethodCallValidator(Openrpcthingy52.openrpcDocument);
  }
  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
     this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
   public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[Openrpcthingy52.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[Openrpcthingy52.request]] will be added to the batch.
   * Once [[Openrpcthingy52.stopBatch]] is called, the promises for the [[Openrpcthingy52.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[Openrpcthingy52]] calls made since the last [[Openrpcthingy52.startBatch]] call. For
   * that reason, [[Openrpcthingy52.startBatch]] MUST be called before [[Openrpcthingy52.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find(Openrpcthingy52.openrpcDocument.methods, ({name}) => name === methodName) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if ( openRpcMethodValidationErrors instanceof MethodNotFoundError || openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(params, _.map(methodObject.params, "name"));
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify(methodName, rpcParams);
    }
    return this.rpc.request(methodName, rpcParams, this.timeout);
  }

  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public startScan: StartScan = (...params) => {
    return this.request("startScan", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public stopScan: StopScan = (...params) => {
    return this.request("stopScan", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public getSensorData: GetSensorData = (...params) => {
    return this.request("getSensorData", params);
  }
  
}
export default Openrpcthingy52;
